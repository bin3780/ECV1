// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ECV1DevContext))]
    partial class ECV1DevContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClassDay", b =>
                {
                    b.Property<int>("IdClass")
                        .HasColumnType("int");

                    b.Property<int>("IdWeekday")
                        .HasColumnType("int");

                    b.HasKey("IdClass", "IdWeekday");

                    b.HasIndex("IdWeekday");

                    b.ToTable("ClassDay", (string)null);
                });

            modelBuilder.Entity("Data.Tables.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("UID")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Data.Tables.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Classname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int");

                    b.Property<string>("LinkGgmeet")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LinkGGMeet");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCourse");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("Data.Tables.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Coursename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("Data.Tables.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdAccount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.ToTable("Manager", (string)null);
                });

            modelBuilder.Entity("Data.Tables.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("Point1")
                        .HasColumnType("float")
                        .HasColumnName("Point");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Point", (string)null);
                });

            modelBuilder.Entity("Data.Tables.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("IdAccountNavigationId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JwtTokenId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTokenString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdAccountNavigationId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Data.Tables.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<int?>("Classkey")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdAccount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Classkey");

                    b.HasIndex("IdAccount");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("Data.Tables.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<int?>("Classkey")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdAccount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Classkey");

                    b.HasIndex("IdAccount");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("Data.Tables.Transcript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("IdClass")
                        .HasColumnType("int");

                    b.Property<int?>("IdManager")
                        .HasColumnType("int");

                    b.Property<int?>("IdPoint")
                        .HasColumnType("int");

                    b.Property<int?>("IdStudent")
                        .HasColumnType("int");

                    b.Property<int?>("IdTeacher")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool?>("StatusPay")
                        .HasColumnType("bit");

                    b.HasIndex("IdClass");

                    b.HasIndex("IdManager");

                    b.HasIndex("IdPoint");

                    b.HasIndex("IdStudent");

                    b.HasIndex("IdTeacher");

                    b.ToTable("Transcript", (string)null);
                });

            modelBuilder.Entity("Data.Tables.Weekday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Weekday", (string)null);
                });

            modelBuilder.Entity("ClassDay", b =>
                {
                    b.HasOne("Data.Tables.Class", null)
                        .WithMany()
                        .HasForeignKey("IdClass")
                        .IsRequired()
                        .HasConstraintName("FK_ClassDay_Class");

                    b.HasOne("Data.Tables.Weekday", null)
                        .WithMany()
                        .HasForeignKey("IdWeekday")
                        .IsRequired()
                        .HasConstraintName("FK_ClassDay_Weekday");
                });

            modelBuilder.Entity("Data.Tables.Class", b =>
                {
                    b.HasOne("Data.Tables.Course", "IdCourseNavigation")
                        .WithMany("Classes")
                        .HasForeignKey("IdCourse")
                        .IsRequired()
                        .HasConstraintName("FK_Class_Course");

                    b.Navigation("IdCourseNavigation");
                });

            modelBuilder.Entity("Data.Tables.Manager", b =>
                {
                    b.HasOne("Data.Tables.Account", "IdAccountNavigation")
                        .WithMany("Managers")
                        .HasForeignKey("IdAccount")
                        .HasConstraintName("FK_Manager_Account");

                    b.Navigation("IdAccountNavigation");
                });

            modelBuilder.Entity("Data.Tables.RefreshToken", b =>
                {
                    b.HasOne("Data.Tables.Account", "IdAccountNavigation")
                        .WithMany()
                        .HasForeignKey("IdAccountNavigationId");

                    b.Navigation("IdAccountNavigation");
                });

            modelBuilder.Entity("Data.Tables.Student", b =>
                {
                    b.HasOne("Data.Tables.Class", "ClasskeyNavigation")
                        .WithMany("Students")
                        .HasForeignKey("Classkey")
                        .HasConstraintName("FK_Student_Class");

                    b.HasOne("Data.Tables.Account", "IdAccountNavigation")
                        .WithMany("Students")
                        .HasForeignKey("IdAccount")
                        .HasConstraintName("FK_Student_Account");

                    b.Navigation("ClasskeyNavigation");

                    b.Navigation("IdAccountNavigation");
                });

            modelBuilder.Entity("Data.Tables.Teacher", b =>
                {
                    b.HasOne("Data.Tables.Class", "ClasskeyNavigation")
                        .WithMany("Teachers")
                        .HasForeignKey("Classkey")
                        .HasConstraintName("FK_Teacher_Class");

                    b.HasOne("Data.Tables.Account", "IdAccountNavigation")
                        .WithMany("Teachers")
                        .HasForeignKey("IdAccount")
                        .HasConstraintName("FK_Teacher_Account");

                    b.Navigation("ClasskeyNavigation");

                    b.Navigation("IdAccountNavigation");
                });

            modelBuilder.Entity("Data.Tables.Transcript", b =>
                {
                    b.HasOne("Data.Tables.Class", "IdClassNavigation")
                        .WithMany()
                        .HasForeignKey("IdClass")
                        .HasConstraintName("FK_Transcript_Class");

                    b.HasOne("Data.Tables.Manager", "IdManagerNavigation")
                        .WithMany()
                        .HasForeignKey("IdManager")
                        .HasConstraintName("FK_Transcript_Manager");

                    b.HasOne("Data.Tables.Point", "IdPointNavigation")
                        .WithMany()
                        .HasForeignKey("IdPoint")
                        .HasConstraintName("FK_Transcript_Point");

                    b.HasOne("Data.Tables.Student", "IdStudentNavigation")
                        .WithMany()
                        .HasForeignKey("IdStudent")
                        .HasConstraintName("FK_Transcript_Student");

                    b.HasOne("Data.Tables.Teacher", "IdTeacherNavigation")
                        .WithMany()
                        .HasForeignKey("IdTeacher")
                        .HasConstraintName("FK_Transcript_Teacher");

                    b.Navigation("IdClassNavigation");

                    b.Navigation("IdManagerNavigation");

                    b.Navigation("IdPointNavigation");

                    b.Navigation("IdStudentNavigation");

                    b.Navigation("IdTeacherNavigation");
                });

            modelBuilder.Entity("Data.Tables.Account", b =>
                {
                    b.Navigation("Managers");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Data.Tables.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Data.Tables.Course", b =>
                {
                    b.Navigation("Classes");
                });
#pragma warning restore 612, 618
        }
    }
}
